@page "/"
@page "/resources"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using R2.Data.Entities
@using R2.Data.Context
@using R2.Data.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using System.Linq.Expressions
@implements IAsyncDisposable
@inject IDbContextFactory<R2.Data.Context.R2DbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Ressources</PageTitle>

<div class="container-fluid px-0">
    <AuthorizeView>
        <Authorized>
            <!-- Affichage pour les utilisateurs authentifiés -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4 gap-3">
                <h1 class="mb-0">Ressources</h1>
                <div>
                    <a href="resources/create" class="btn btn-primary w-100 w-md-auto">
                        <i class="bi bi-plus-circle"></i> Créer une nouvelle ressource
                    </a>
                </div>
            </div>

            @* FILTRES et TRI *@
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Filtres et tri</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <!-- Filtres existants -->
                        <div class="col-md-6 col-lg-3">
                            <label for="statusFilter" class="form-label">Statut</label>
                            <select id="statusFilter" class="form-select" @bind="statusFilter">
                                <option value="-1">Tous</option>
                                @foreach (var status in Enum.GetValues(typeof(ResourceStatus)).Cast<ResourceStatus>().Where(s => s != ResourceStatus.Hanged))
                                {
                                    <option value="@((int)status)">@GetStatusDisplayName(status)</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3">
                            <label for="typeFilter" class="form-label">Type</label>
                            <select id="typeFilter" class="form-select" @bind="typeFilter">
                                <option value="-1">Tous</option>
                                @foreach (var type in Enum.GetValues(typeof(ResourceType)))
                                {
                                    <option value="@((int)type)">@GetTypeDisplayName((ResourceType)type)</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3">
                            <label for="categoryFilter" class="form-label">Catégorie</label>
                            <select id="categoryFilter" class="form-select" @bind="categoryFilter">
                                <option value="-1">Toutes</option>
                                @if (categories != null)
                                {
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 d-flex align-items-end">
                            <div class="d-flex gap-2 w-100">
                                <button class="btn btn-outline-primary flex-grow-1" @onclick="ApplyFilters">
                                    <i class="bi bi-funnel"></i> <span class="d-none d-sm-inline">Appliquer</span>
                                </button>
                                <button class="btn btn-outline-secondary flex-grow-1" @onclick="ResetFilters">
                                    <i class="bi bi-x-circle"></i> <span class="d-none d-sm-inline">Réinitialiser</span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Options de tri -->
                    <div class="row mt-3">
                        <div class="col-md-8">
                            <label for="sortBy" class="form-label">Trier par</label>
                            <select id="sortBy" class="form-select" @bind="sortByOption">
                                <option value="0">Nom (A-Z)</option>
                                <option value="1">Nom (Z-A)</option>
                                <option value="2">Date (Plus récente)</option>
                                <option value="3">Date (Plus ancienne)</option>
                            </select>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-outline-primary w-100 mt-3 mt-md-0" @onclick="ApplySorting">
                                <i class="bi bi-sort-alpha-down"></i> Trier
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <!-- Affichage pour les utilisateurs non authentifiés -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4 gap-3">
                <h1 class="mb-0">Ressources</h1>
                <div>
                    <a href="login" class="btn btn-primary w-100 w-md-auto">
                        <i class="bi bi-box-arrow-in-right"></i> Se connecter
                    </a>
                </div>
            </div>
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i> Connectez-vous pour voir toutes les ressources et avoir accès à des fonctionnalités supplémentaires.
            </div>

            <!-- Options de tri pour les utilisateurs non authentifiés -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Tri</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <label for="sortByPublic" class="form-label">Trier par</label>
                            <select id="sortBy" class="form-select" @bind="sortByOption">
                                <option value="0">Nom (A-Z)</option>
                                <option value="1">Nom (Z-A)</option>
                                <option value="2" selected>Date (Plus récente)</option>
                                <option value="3">Date (Plus ancienne)</option>
                            </select>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-outline-primary w-100 mt-3 mt-md-0" @onclick="ApplySorting">
                                <i class="bi bi-sort-alpha-down"></i> Trier
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    @*RESSOURCES*@
    @if (filteredResources == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (!filteredResources.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i> Aucune ressource ne correspond aux critères de recherche.
        </div>
    }
    else
    {
        <!-- Affichage du tri actuel -->
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-3">
            <div class="text-muted small">
                <i class="bi bi-sort"></i> Tri actuel : @GetSortOptionDisplayName()
            </div>
            <div class="text-muted small">
                @filteredResources.Count ressource(s)
            </div>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mb-4">
            @foreach (var resource in filteredResources)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge @GetStatusBadgeClass(resource.Status)">
                                @GetStatusDisplayName(resource.Status)
                            </span>
                            <span class="badge bg-primary">
                                @GetTypeDisplayName(resource.Type)
                            </span>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-truncate">@resource.Name</h5>
                            <p class="card-text mb-auto overflow-hidden" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; max-height: 3em;">
                                @resource.Description
                            </p>
                            <div class="d-flex justify-content-between small text-muted mt-2">
                                <span title="@resource.CreationDate.ToString("dd/MM/yyyy HH:mm")">
                                    <i class="bi bi-calendar3"></i> 
                                    <span class="d-none d-sm-inline">@resource.CreationDate.ToString("dd/MM/yyyy HH:mm")</span>
                                    <span class="d-inline d-sm-none">@resource.CreationDate.ToString("dd/MM/yy")</span>
                                </span>
                                <span><i class="bi bi-tag"></i> 
                                    <span class="text-truncate d-inline-block" style="max-width: 100px;">@(resource.Category?.Name ?? "Sans catégorie")</span>
                                </span>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">

                            <AuthorizeView Roles="Citoyen">
                                <Authorized>
                                    <div class="d-flex flex-wrap gap-1">
                                        <a href="@($"resources/details?id={resource.Id}")" class="btn btn-sm btn-primary flex-grow-1">
                                            <i class="bi bi-eye"></i> <span class="d-none d-md-inline">Afficher</span>
                                        </a>
                                    </div>
                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView Roles="Administrateur,Super-Administrateur">
                                <Authorized>
                                    <div class="d-flex flex-wrap gap-1">
                                         <a href="@($"resources/details?id={resource.Id}")" class="btn btn-sm btn-primary flex-grow-1">
                                            <i class="bi bi-eye"></i> <span class="d-none d-md-inline">Afficher</span>
                                        </a>
                                        <a href="@($"resources/edit?id={resource.Id}")" class="btn btn-sm btn-secondary flex-grow-1">
                                            <i class="bi bi-pencil"></i> <span class="d-none d-md-inline">Modifier</span>
                                        </a>
                                        <a href="@($"resources/delete/{resource.Id}")" class="btn btn-sm btn-outline-danger flex-grow-1">
                                            <i class="bi bi-trash"></i> <span class="d-none d-md-inline">Supprimer</span>
                                        </a>
                                    </div>
                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView>
                                <Authorized>
                                    <div class="d-flex flex-wrap gap-1 mt-2">
                                        <button class="btn btn-sm btn-outline-success flex-grow-1" @onclick="() => AddToFavorites(resource)">
                                            <i class="bi bi-star"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-info flex-grow-1" @onclick="() => MarkAsExploited(resource)">
                                            <i class="bi bi-check-circle"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-warning flex-grow-1" @onclick="() => ShareResource(resource)">
                                            <i class="bi bi-share"></i>
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView>
                                <NotAuthorized>
                                    <div class="d-flex flex-wrap gap-1">
                                        <a href="@($"resources/details?id={resource.Id}")" class="btn btn-sm btn-outline-primary flex-grow-1">
                                            <i class="bi bi-eye"></i> Afficher
                                        </a>
                                    </div>
                                </NotAuthorized>
                            </AuthorizeView>

                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private R2DbContext context = default!;
    private List<Resource> allResources = new List<Resource>();
    private List<Resource> filteredResources = new List<Resource>();
    private List<Category> categories = new List<Category>();
    private int statusFilter = -1;
    private int typeFilter = -1;
    private int categoryFilter = -1;
    private bool showDeleteModal = false;
    private bool showDeletedToast = false;
    private bool isDeleting = false;
    private Resource resourceToDelete;
    private int relatedItemsCount = 0;
    private bool isAuthenticated = false;

    // Options de tri: 0=Nom A-Z, 1=Nom Z-A, 2=Date récente, 3=Date ancienne
    private int sortByOption = 2; 

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        // Vérifier si l'utilisateur est authentifié
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Si l'utilisateur n'est pas authentifié, charger uniquement les ressources publiques
            if (!isAuthenticated)
            {
                allResources = await context.Ressources
                    .Include(r => r.Category)
                    .Where(r => r.Status == ResourceStatus.Public)
                    .ToListAsync();
            }
            else
            {
                allResources = await context.Ressources
                    .Include(r => r.Category)
                    .ToListAsync();
            }

            categories = await context.Categories.ToListAsync();

            ApplyFilters();
            ApplySorting();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors du chargement des données : {ex.Message}");
            // Initialiser avec des listes vides en cas d'erreur
            allResources = new List<Resource>();
            categories = new List<Category>();
            filteredResources = new List<Resource>();
        }
    }

    private void ApplyFilters()
    {
        try
        {
            filteredResources = new List<Resource>(allResources);

            if (statusFilter != -1)
            {
                filteredResources = filteredResources
                    .Where(r => (int)r.Status == statusFilter)
                    .ToList();
            }

            // Si l'utilisateur n'est pas authentifié, on s'assure toujours de n'avoir que des ressources publiques
            if (!isAuthenticated)
            {
                filteredResources = filteredResources
                    .Where(r => r.Status == ResourceStatus.Public)
                    .ToList();
            }

            if (typeFilter != -1)
            {
                filteredResources = filteredResources
                    .Where(r => (int)r.Type == typeFilter)
                    .ToList();
            }

            if (categoryFilter != -1)
            {
                filteredResources = filteredResources
                    .Where(r => r.CategoryId == categoryFilter)
                    .ToList();
            }

            // Appliquer également le tri actuel
            ApplySorting();

            // Forcer le rafraîchissement de l'interface
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de l'application des filtres : {ex.Message}");
        }
    }

    private void ApplySorting()
    {
        try
        {
            // Appliquer le tri selon l'option choisie
            switch (sortByOption)
            {
                case 0: // Nom A-Z
                    filteredResources = filteredResources.OrderBy(r => r.Name).ToList();
                    break;
                case 1: // Nom Z-A
                    filteredResources = filteredResources.OrderByDescending(r => r.Name).ToList();
                    break;
                case 2: // Date (Plus récente)
                    filteredResources = filteredResources.OrderByDescending(r => r.CreationDate).ToList();
                    break;
                case 3: // Date (Plus ancienne)
                    filteredResources = filteredResources.OrderBy(r => r.CreationDate).ToList();
                    break;
                default:
                    // Par défaut : tri par date décroissante
                    filteredResources = filteredResources.OrderByDescending(r => r.CreationDate).ToList();
                    break;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de l'application du tri : {ex.Message}");
        }
    }
    private string GetSortOptionDisplayName()
    {
        return sortByOption switch
        {
            0 => "Nom (A-Z)",
            1 => "Nom (Z-A)",
            2 => "Date (Plus récente)",
            3 => "Date (Plus ancienne)",
            _ => "Nom (A-Z)"
        };
    }

    private void ResetFilters()
    {
        statusFilter = -1;
        typeFilter = -1;
        categoryFilter = -1;
        ApplyFilters();
    }

    private void ConfirmDelete(Resource resource)
    {
        resourceToDelete = resource;
        showDeleteModal = true;
    }

    // TODO
    private async Task AddToFavorites(Resource resource)
    {
        // Logique pour ajouter aux favoris
        // Nécessite l'utilisateur courant
    }

    // TODO
    private async Task MarkAsExploited(Resource resource)
    {
        // Logique pour marquer comme exploitée
        // Nécessite l'utilisateur courant
    }

    // TODO
    private void ShareResource(Resource resource)
    {
        // Logique pour partager
        // Pourrait ouvrir un modal avec options de partage
    }

    private string GetStatusDisplayName(ResourceStatus status)
    {
        return status switch
        {
            ResourceStatus.Private => "Privé",
            ResourceStatus.Public => "Public",
            ResourceStatus.Draft => "Brouillon",
            _ => ""
        };
    }

    private string GetTypeDisplayName(ResourceType type)
    {
        return type switch
        {
            ResourceType.Activity => "Activité",
            ResourceType.Game => "Jeu",
            ResourceType.Document => "Document",
            _ => ""
        };
    }

    private string GetStatusBadgeClass(ResourceStatus status)
    {
        return status switch
        {
            ResourceStatus.Private => "bg-secondary",
            ResourceStatus.Public => "bg-success",
            ResourceStatus.Draft => "bg-warning",
            _ => "bg-info"
        };
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}