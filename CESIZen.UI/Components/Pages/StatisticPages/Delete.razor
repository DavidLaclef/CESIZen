@page "/statistics/delete"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Statistic</h2>
    <hr />
    @if (statistic is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">RessourcesRead</dt>
            <dd class="col-sm-10">@statistic.RessourcesRead</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RessourcesCreated</dt>
            <dd class="col-sm-10">@statistic.RessourcesCreated</dd>
        </dl>
        <EditForm method="post" Model="statistic" OnValidSubmit="DeleteStatistic" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(statistic is null)">Delete</button> |
            <a href="/statistics">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Statistic? statistic;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        statistic = await context.Statistics.FirstOrDefaultAsync(m => m.Id == Id);

        if (statistic is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStatistic()
    {
        using var context = DbFactory.CreateDbContext();
        context.Statistics.Remove(statistic!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/statistics");
    }
}
