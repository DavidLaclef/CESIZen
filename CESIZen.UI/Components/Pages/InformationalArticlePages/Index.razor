@page "/"
@page "/informationalArticles"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using CESIZen.Data.Context
@using CESIZen.Data.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using System.Linq.Expressions
@implements IAsyncDisposable
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Articles</PageTitle>

<div class="container-fluid px-0">
    @* <AuthorizeView Roles="Administrateur"> *@
    <AuthorizeView>
        <Authorized>
            <!-- Affichage pour les utilisateurs authentifiés -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4 gap-3">
                <h1 class="mb-0">Articles</h1>
                <div>
                    <a href="informationalArticles/create" class="btn btn-primary w-100 w-md-auto">
                        <i class="bi bi-plus-circle"></i> Créer un nouvel article
                    </a>
                </div>
            </div>

            @* FILTRES et TRI *@
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Filtres et tri</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6 col-lg-3">
                            <label for="categoryFilter" class="form-label">Catégorie</label>
                            <select id="categoryFilter" class="form-select" @bind="categoryFilter">
                                <option value="-1">Toutes</option>
                                @if (categories != null)
                                {
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 d-flex align-items-end">
                            <div class="d-flex gap-2 w-100">
                                <button class="btn btn-outline-primary flex-grow-1" @onclick="ApplyFilters">
                                    <i class="bi bi-funnel"></i> <span class="d-none d-sm-inline">Appliquer</span>
                                </button>
                                <button class="btn btn-outline-secondary flex-grow-1" @onclick="ResetFilters">
                                    <i class="bi bi-x-circle"></i> <span class="d-none d-sm-inline">Réinitialiser</span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Options de tri -->
                    <div class="row mt-3">
                        <div class="col-md-8">
                            <label for="sortBy" class="form-label">Trier par</label>
                            <select id="sortBy" class="form-select" @bind="sortByOption">
                                <option value="0">Nom (A-Z)</option>
                                <option value="1">Nom (Z-A)</option>
                                <option value="2">Date (Plus récente)</option>
                                <option value="3">Date (Plus ancienne)</option>
                            </select>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-outline-primary w-100 mt-3 mt-md-0" @onclick="ApplySorting">
                                <i class="bi bi-sort-alpha-down"></i> Trier
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <!-- Affichage pour les utilisateurs non authentifiés -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4 gap-3">
                <h1 class="mb-0">Articles</h1>
                <div>
                    <a href="login" class="bg-custom-login btn w-100 w-md-auto">
                        <i class="bi bi-box-arrow-in-right"></i> Se connecter
                    </a>
                </div>
            </div>
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i> Connectez-vous pour voir tous les articles et avoir accès à des fonctionnalités supplémentaires.
            </div>

            <!-- Options de tri pour les utilisateurs non authentifiés -->
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Tri</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <label for="sortByPublic" class="form-label">Trier par</label>
                            <select id="sortBy" class="form-select" @bind="sortByOption">
                                <option value="0">Nom (A-Z)</option>
                                <option value="1">Nom (Z-A)</option>
                                <option value="2" selected>Date (Plus récente)</option>
                                <option value="3">Date (Plus ancienne)</option>
                            </select>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-outline-primary w-100 mt-3 mt-md-0" @onclick="ApplySorting">
                                <i class="bi bi-sort-alpha-down"></i> Trier
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    @*ARTICLES*@
    @if (filteredinformationalArticles == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (!filteredinformationalArticles.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i> Aucun article ne correspond aux critères de recherche.
        </div>
    }
    else
    {
        <!-- Affichage du tri actuel -->
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-3">
            <div class="text-muted small">
                <i class="bi bi-sort"></i> Tri actuel : @GetSortOptionDisplayName()
            </div>
            <div class="text-muted small">
                @filteredinformationalArticles.Count ressource(s)
            </div>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mb-4">
            @foreach (var informationalArticle in filteredinformationalArticles)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-truncate">@informationalArticle.Title</h5>
                            <p class="card-text mb-auto overflow-hidden" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; max-height: 3em;">
                                @informationalArticle.Content
                            </p>
                            <div class="d-flex justify-content-between small text-muted mt-2">
                                <span title="@informationalArticle.CreationDate.ToString("dd/MM/yyyy HH:mm")">
                                    <i class="bi bi-calendar3"></i> 
                                    <span class="d-none d-sm-inline">@informationalArticle.CreationDate.ToString("dd/MM/yyyy HH:mm")</span>
                                    <span class="d-inline d-sm-none">@informationalArticle.CreationDate.ToString("dd/MM/yy")</span>
                                </span>
                                <span><i class="bi bi-tag"></i> 
                                    <span class="text-truncate d-inline-block" style="max-width: 100px;">@(informationalArticle.Category?.Name ?? "Sans catégorie")</span>
                                </span>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">
                            <AuthorizeView Roles="Administrateur">
                                <Authorized>
                                    <div class="d-flex flex-wrap gap-1">
                                        <a href="@($"informationalArticles/details?id={informationalArticle.Id}")" class="btn btn-sm btn-outline-primary flex-grow-1">
                                            <i class="bi bi-eye"></i> <span class="d-none d-md-inline">Afficher</span>
                                        </a>
                                        <a href="@($"informationalArticles/edit?id={informationalArticle.Id}")" class="btn btn-sm btn-outline-secondary flex-grow-1">
                                            <i class="bi bi-pencil"></i> <span class="d-none d-md-inline">Modifier</span>
                                        </a>
                                        <a href="@($"informationalArticles/delete/{informationalArticle.Id}")" class="btn btn-sm btn-outline-danger flex-grow-1">
                                            <i class="bi bi-trash"></i> <span class="d-none d-md-inline">Supprimer</span>
                                        </a>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                            <AuthorizeView Roles="Utilisateur">
                                <Authorized>
                                    <div class="d-flex flex-wrap gap-1">
                                        <a href="@($"informationalArticles/details?id={informationalArticle.Id}")" class="btn btn-sm btn-outline-primary flex-grow-1">
                                            <i class="bi bi-eye"></i> <span class="d-none d-md-inline">Afficher</span>
                                        </a>
                                    </div>
                                    <div class="d-flex flex-wrap gap-1 mt-2">
                                        <button class="btn btn-sm btn-outline-success flex-grow-1" @onclick="() => AddToFavorites(informationalArticle)">
                                            <i class="bi bi-star"></i> <span class="d-none d-md-inline">Favoris</span>
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                            <AuthorizeView>
                                <NotAuthorized>
                                    <div class="d-flex flex-wrap gap-1">
                                        <a href="@($"informationalArticles/details?id={informationalArticle.Id}")" class="btn btn-sm btn-outline-primary flex-grow-1">
                                            <i class="bi bi-eye"></i> <span class="d-none d-md-inline">Afficher</span>
                                        </a>
                                    </div>
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (showDeleteModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            Confirmer la suppression
                        </h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        @if (isDeleting)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border text-danger" role="status">
                                    <span class="visually-hidden">Suppression en cours...</span>
                                </div>
                                <p class="mt-2">Suppression en cours...</p>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <p>Êtes-vous sûr de vouloir supprimer la ressource <strong>"@informationalArticlesToDelete?.Title"</strong> ?</p>

                                @if (relatedItemsCount > 0)
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle me-2"></i>
                                        <strong>Attention :</strong> Cette ressource est utilisée dans @relatedItemsCount élément(s).
                                        La suppression affectera tous ces éléments liés.
                                    </div>
                                }

                                <p class="text-danger">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    Cette action est irréversible.
                                </p>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete" disabled="@isDeleting">
                            Annuler
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteResource" disabled="@isDeleting">
                            <i class="bi bi-trash me-1"></i> Supprimer définitivement
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showDeletedToast)
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <i class="bi bi-check-circle me-2"></i>
                    <strong class="me-auto">Suppression réussie</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showDeletedToast = false"></button>
                </div>
                <div class="toast-body">
                    La ressource a été supprimée avec succès.
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CESIZenDbContext context = default!;
    private List<InformationalArticle> allinformationalArticles = new List<InformationalArticle>();
    private List<InformationalArticle> filteredinformationalArticles = new List<InformationalArticle>();
    private List<CategoryInformation> categories = new List<CategoryInformation>();
    private int statusFilter = -1;
    private int typeFilter = -1;
    private int categoryFilter = -1;
    private bool showDeleteModal = false;
    private bool showDeletedToast = false;
    private bool isDeleting = false;
    private InformationalArticle informationalArticlesToDelete;
    private int relatedItemsCount = 0;
    private bool isAuthenticated = false;

    // Options de tri: 0=Nom A-Z, 1=Nom Z-A, 2=Date récente, 3=Date ancienne
    private int sortByOption = 2; 

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        // Vérifier si l'utilisateur est authentifié
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            allinformationalArticles = await context.InformationalArticles
                .Include(r => r.Category)
                .ToListAsync();

            categories = await context.CategoriesInformation.ToListAsync();

            ApplyFilters();
            ApplySorting();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors du chargement des données : {ex.Message}");
            // Initialiser avec des listes vides en cas d'erreur
            allinformationalArticles= new List<InformationalArticle>();
            categories = new List<CategoryInformation>();
            filteredinformationalArticles = new List<InformationalArticle>();
        }
    }

    private void ApplyFilters()
    {
        try
        {
            filteredinformationalArticles = new List<InformationalArticle>(allinformationalArticles);

            if (categoryFilter != -1)
            {
                filteredinformationalArticles = filteredinformationalArticles
                    .Where(r => r.CategoryId == categoryFilter)
                    .ToList();
            }

            // Appliquer également le tri actuel
            ApplySorting();

            // Forcer le rafraîchissement de l'interface
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de l'application des filtres : {ex.Message}");
        }
    }

    private void ApplySorting()
    {
        try
        {
            // Appliquer le tri selon l'option choisie
            switch (sortByOption)
            {
                case 0: // Nom A-Z
                    filteredinformationalArticles = filteredinformationalArticles.OrderBy(r => r.Title).ToList();
                    break;
                case 1: // Nom Z-A
                    filteredinformationalArticles = filteredinformationalArticles.OrderByDescending(r => r.Title).ToList();
                    break;
                case 2: // Date (Plus récente)
                    filteredinformationalArticles = filteredinformationalArticles.OrderByDescending(r => r.CreationDate).ToList();
                    break;
                case 3: // Date (Plus ancienne)
                    filteredinformationalArticles = filteredinformationalArticles.OrderBy(r => r.CreationDate).ToList();
                    break;
                default:
                    // Par défaut : tri par date décroissante
                    filteredinformationalArticles = filteredinformationalArticles.OrderByDescending(r => r.CreationDate).ToList();
                    break;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de l'application du tri : {ex.Message}");
        }
    }
    private string GetSortOptionDisplayName()
    {
        return sortByOption switch
        {
            0 => "Nom (A-Z)",
            1 => "Nom (Z-A)",
            2 => "Date (Plus récente)",
            3 => "Date (Plus ancienne)",
            _ => "Nom (A-Z)"
        };
    }

    private void ResetFilters()
    {
        statusFilter = -1;
        typeFilter = -1;
        categoryFilter = -1;
        ApplyFilters();
    }

    private void ConfirmDelete(InformationalArticle informationalArticle)
    {
        informationalArticlesToDelete = informationalArticle;
        showDeleteModal = true;
    }

    private async Task DeleteResource()
    {
        if (informationalArticlesToDelete != null)
        {
            try
            {
                isDeleting = true;
                StateHasChanged();

                // Supprimer la ressource
                context.InformationalArticles.Remove(informationalArticlesToDelete);
                await context.SaveChangesAsync();

                // Rafraîchir les données
                await LoadData();

                // Afficher une notification de succès
                showDeletedToast = true;

                // Masquer la notification après 5 secondes
                var timer = new System.Threading.Timer(_ =>
                {
                    InvokeAsync(() =>
                    {
                        showDeletedToast = false;
                        StateHasChanged();
                    });
                }, null, 5000, Timeout.Infinite);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Erreur lors de la suppression : {ex.Message}");
            }
            finally
            {
                isDeleting = false;
                showDeleteModal = false;
                informationalArticlesToDelete = null;
                StateHasChanged();
            }
        }
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        informationalArticlesToDelete = null;
        relatedItemsCount = 0;
    }

    // TODO
    private async Task AddToFavorites(InformationalArticle informationalArticle)
    {
        // Logique pour ajouter aux favoris
        // Nécessite l'utilisateur courant
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}