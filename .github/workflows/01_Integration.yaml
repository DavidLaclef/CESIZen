name: 01 - Integration

on:
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    name: Test and Build
    uses: ./.github/workflows/01-1_TestAndBuild.yaml
    secrets: inherit

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [test-and-build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          dotnet restore CESIZen.UI/CESIZen.UI.csproj
          dotnet restore CESIZen.Tests/CESIZen.Tests.csproj

      - name: Build
        run: |
          dotnet build CESIZen.UI/CESIZen.UI.csproj --no-restore --configuration Release
          dotnet build CESIZen.Tests/CESIZen.Tests.csproj --no-restore --configuration Release

      - name: Run tests with coverage
        run: |
          dotnet test CESIZen.Tests/CESIZen.Tests.csproj \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --logger trx \
            --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing

      - name: Install dotnet-coverage
        run: dotnet tool install -g dotnet-coverage

      - name: Generate coverage report
        run: |
          dotnet-coverage merge ./TestResults/**/*.coverage -o ./TestResults/coverage.cobertura.xml -f cobertura

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            ./TestResults/coverage.cobertura.xml
            ./TestResults/**/*.trx
          retention-days: 30

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: windows-latest
    needs: [test-and-build]

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # NOUVEAU: Tests pour SonarQube
      - name: Run tests for SonarQube
        shell: powershell
        run: |
          dotnet test CESIZen.Tests\CESIZen.Tests.csproj `
            --configuration Release `
            --collect:"XPlat Code Coverage" `
            --results-directory .\TestResults `
            --logger trx `
            --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"DavidLaclef_CESIZen" `
            /o:"davidlaclef" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.dotcover.reportsPaths=".\TestResults\**\*.coverage" `
            /d:sonar.coverage.exclusions="**\*.razor,**\*.cshtml,**\Program.cs,**\Startup.cs,**\Migrations\**"
          
          dotnet build CESIZen.sln --configuration Release
          
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-and-build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-and-build, code-quality]
    if: always()

    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./test-results
        continue-on-error: true

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage-reports
        continue-on-error: true

      - name: Generate Test Summary
        run: |
          echo "# 📊 Résumé des Tests CESIZen" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Status des Jobs" >> $GITHUB_STEP_SUMMARY
          echo "- Test & Build: ${{ needs.test-and-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Vérifier les fichiers de test
          if [ -d "./test-results" ]; then
            echo "## ✅ Résultats des Tests" >> $GITHUB_STEP_SUMMARY
            UNIT_COUNT=$(find ./test-results -name "*unit*" -type f | wc -l)
            INTEGRATION_COUNT=$(find ./test-results -name "*integration*" -type f | wc -l)
            DATABASE_COUNT=$(find ./test-results -name "*database*" -type f | wc -l)
            
            echo "- Tests unitaires: $UNIT_COUNT fichier(s)" >> $GITHUB_STEP_SUMMARY
            echo "- Tests d'intégration: $INTEGRATION_COUNT fichier(s)" >> $GITHUB_STEP_SUMMARY
            echo "- Tests de base de données: $DATABASE_COUNT fichier(s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Aucun résultat de test trouvé" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Vérifier la couverture
          if [ -d "./coverage-reports" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📈 Couverture de Code" >> $GITHUB_STEP_SUMMARY
            echo "- Rapport de couverture généré ✅" >> $GITHUB_STEP_SUMMARY
            echo "- Voir SonarQube pour les détails complets" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Voir les détails dans SonarCloud](https://sonarcloud.io/project/overview?id=DavidLaclef_CESIZen)" >> $GITHUB_STEP_SUMMARY