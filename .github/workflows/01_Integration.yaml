name: 01 - Integration

on:
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    name: Test and Build
    uses: ./.github/workflows/01-1_TestAndBuild.yaml
    secrets: inherit

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [test-and-build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore CESIZen.UI/CESIZen.UI.csproj

      - name: Build
        run: dotnet build CESIZen.UI/CESIZen.UI.csproj --no-restore --configuration Release

      # Commenter temporairement les tests avec couverture
      # - name: Run tests with coverage
      #   run: |
      #     dotnet test --no-build --configuration Release \
      #       --collect:"XPlat Code Coverage" \
      #       --results-directory ./TestResults/ \
      #       --logger trx \
      #       --verbosity normal

      # - name: Install dotnet-coverage
      #   run: dotnet tool install -g dotnet-coverage

      # - name: Generate coverage report
      #   run: |
      #     dotnet-coverage merge ./TestResults/**/*.coverage -o ./TestResults/coverage.cobertura.xml -f cobertura

      # Commenter SonarCloud temporairement
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=cesizen
      #       -Dsonar.organization=votre-organization
      #       -Dsonar.cs.dotcover.reportsPaths=./TestResults/coverage.cobertura.xml
      #       -Dsonar.coverage.exclusions=**/*.razor,**/*.cshtml,**/Program.cs,**/Startup.cs

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: windows-latest
    needs: [test-and-build]

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"DavidLaclef_CESIZen" /o:"davidlaclef" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build CESIZen.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-and-build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'