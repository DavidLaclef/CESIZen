name: 01-1 - Test and Build CESIZen

on:
  workflow_call

jobs:
  test-ui:
    name: Test UI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Strong!Passw0rd123
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd123 -C -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
          --health-start-period=30s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore CESIZen.UI/CESIZen.UI.csproj

      - name: Build UI
        run: dotnet build CESIZen.UI/CESIZen.UI.csproj --no-restore --configuration Release

      # Attendre que SQL Server soit prêt
      - name: Wait for SQL Server
        run: |
          echo "Waiting for SQL Server to be ready..."
          for i in {1..30}; do
            if docker exec $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest) /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd123 -C -Q "SELECT 1" > /dev/null 2>&1; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Attempt $i/30: SQL Server not ready, waiting..."
            sleep 10
          done

      - name: Test UI build
        run: dotnet build CESIZen.UI/CESIZen.UI.csproj --configuration Release --verbosity normal
        env:
          ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=CESIZenTestDb;User Id=sa;Password=Strong!Passw0rd123;TrustServerCertificate=true;"

  run-tests:
    name: Run Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: [test-ui]

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Strong!Passw0rd123
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd123 -C -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
          --health-start-period=30s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          dotnet restore CESIZen.UI/CESIZen.UI.csproj
          dotnet restore CESIZen.Tests/CESIZen.Tests.csproj

      - name: Build projects
        run: |
          dotnet build CESIZen.UI/CESIZen.UI.csproj --no-restore --configuration Release
          dotnet build CESIZen.Tests/CESIZen.Tests.csproj --no-restore --configuration Release

      - name: Run Unit Tests
        run: |
          echo "🧪 Exécution des tests unitaires..."
          dotnet test CESIZen.Tests/CESIZen.Tests.csproj \
            --configuration Release \
            --filter "TestCategory=Unit" \
            --logger "trx;LogFileName=unit-tests.trx" \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage" \
            --verbosity normal

      - name: Run Integration Tests
        run: |
          echo "🔗 Exécution des tests d'intégration..."
          dotnet test CESIZen.Tests/CESIZen.Tests.csproj \
            --configuration Release \
            --filter "TestCategory=Integration" \
            --logger "trx;LogFileName=integration-tests.trx" \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage" \
            --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=CESIZenTestDb;User Id=sa;Password=Strong!Passw0rd123;TrustServerCertificate=true;"

      - name: Run Database Tests
        run: |
          echo "🗄️ Exécution des tests de base de données..."
          dotnet test CESIZen.Tests/CESIZen.Tests.csproj \
            --configuration Release \
            --filter "TestCategory=Database" \
            --logger "trx;LogFileName=database-tests.trx" \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage" \
            --verbosity normal
        env:
          ASPNETCORE_ENVIRONMENT: Testing
          ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=CESIZenTestDb;User Id=sa;Password=Strong!Passw0rd123;TrustServerCertificate=true;"

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Test Results'
          path: './TestResults/*.trx'
          reporter: 'dotnet-trx'
          fail-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./TestResults/*.trx
            ./TestResults/**/*.coverage
          retention-days: 30

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## 📊 Résultats des Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Compter les fichiers de résultats
          UNIT_TESTS=$(find ./TestResults -name "unit-tests.trx" | wc -l)
          INTEGRATION_TESTS=$(find ./TestResults -name "integration-tests.trx" | wc -l)
          DATABASE_TESTS=$(find ./TestResults -name "database-tests.trx" | wc -l)
          
          echo "- ✅ Tests unitaires: $UNIT_TESTS suite(s) exécutée(s)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tests d'intégration: $INTEGRATION_TESTS suite(s) exécutée(s)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tests de base de données: $DATABASE_TESTS suite(s) exécutée(s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 Les résultats détaillés sont disponibles dans les artefacts." >> $GITHUB_STEP_SUMMARY

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-ui, run-tests]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build UI Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: CESIZen.UI/Dockerfile
          push: false
          tags: cesizen-ui:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image
        run: |
          echo "Listing available Docker images:"
          docker images
          echo "Checking if our image exists:"
          docker images cesizen-ui:test

      - name: Test Docker Compose
        run: |
          # Vérifier la disponibilité de docker compose
          docker compose version
          
          # Créer un fichier docker-compose de test
          cat > docker-compose.test.yml << 'EOF'
          services:
            cesizen_db:
              image: mcr.microsoft.com/mssql/server:2022-latest
              environment:
                - ACCEPT_EULA=Y
                - SA_PASSWORD=Strong!Passw0rd123
                - MSSQL_PID=Express
              ports:
                - "1433:1433"
              healthcheck:
                test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Strong!Passw0rd123 -C -Q 'SELECT 1'"]
                interval: 10s
                timeout: 10s
                retries: 10
                start_period: 30s
            
            cesizen_ui:
              image: cesizen-ui:test
              environment:
                - ConnectionStrings__DefaultConnection=Server=cesizen_db,1433;Database=CESIZenDatabase;User Id=sa;Password=Strong!Passw0rd123;TrustServerCertificate=true;
                - ASPNETCORE_ENVIRONMENT=Production
              ports:
                - "8080:8080"
              depends_on:
                cesizen_db:
                  condition: service_healthy
          EOF

          # Tester que les services démarrent correctement
          echo "Starting services..."
          docker compose -f docker-compose.test.yml up -d
          
          echo "Waiting for services to be ready..."
          sleep 60
          
          echo "Checking services status..."
          docker compose -f docker-compose.test.yml ps
          
          echo "Checking if UI is responsive..."
          for i in {1..30}; do
            if curl -f -s --max-time 10 http://localhost:8080/health 2>/dev/null || curl -f -s --max-time 10 http://localhost:8080/ 2>/dev/null; then
              echo "UI is responsive!"
              break
            fi
            echo "Attempt $i/30: UI not ready, waiting..."
            sleep 10
          done
          
          echo "Showing container logs..."
          docker compose -f docker-compose.test.yml logs
          
          echo "Stopping services..."
          docker compose -f docker-compose.test.yml down