@page "/userrights"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using CESIZen.Data.Context
@implements IAsyncDisposable
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Droits utilisateurs</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Droits utilisateurs</h1>
    <div>
        <a href="userrights/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Créer un nouveau droit
        </a>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else
{
    @* LISTE DES DROITS UTILISATEURS *@
    <div class="card shadow-sm">
        <div class="list-group list-group-flush">
            @foreach (var userRight in userRights)
            {
                <div class="list-group-item list-group-item-action p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-1">@userRight.Label</h5>
                            <p class="small text-muted mb-0">
                                <i class="bi bi-shield-lock"></i> ID: @userRight.Id
                            </p>
                        </div>
                        <div>
                            <div class="btn-group btn-group-sm">
                                <a href="@($"userrights/details?id={userRight.Id}")" class="btn btn-outline-info">
                                    <i class="bi bi-info-circle"></i> Détails
                                </a>
                                <a href="@($"userrights/edit?id={userRight.Id}")" class="btn btn-outline-secondary">
                                    <i class="bi bi-pencil"></i> Modifier
                                </a>
                                <button class="btn btn-outline-danger" @onclick="() => ConfirmDelete(userRight)">
                                    <i class="bi bi-trash"></i> Supprimer
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmer la suppression</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer le droit <strong>@userRightToDelete?.Label</strong> ?</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-triangle"></i> Cette action est irréversible et peut affecter les utilisateurs ayant ce droit.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUserRight">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private CESIZenDbContext context = default!;
    private List<UserRight> userRights = new List<UserRight>();
    private bool isLoading = true;
    private bool showDeleteModal = false;
    private UserRight userRightToDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();
            // Charger les droits utilisateurs
            userRights = await context.UserRights.ToListAsync();
        }
        catch (Exception)
        {
            // Gérer les erreurs
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ConfirmDelete(UserRight userRight)
    {
        userRightToDelete = userRight;
        showDeleteModal = true;
    }

    private async Task DeleteUserRight()
    {
        if (userRightToDelete != null)
        {
            context.UserRights.Remove(userRightToDelete);
            await context.SaveChangesAsync();
            userRights.Remove(userRightToDelete);
        }

        showDeleteModal = false;
        userRightToDelete = null;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        userRightToDelete = null;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}