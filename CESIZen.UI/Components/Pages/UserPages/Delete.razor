@page "/users/delete/{id:int}"
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using CESIZen.Data.Entities
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Supprimer un utilisateur</PageTitle>

<div class="d-flex align-items-center mb-4">
    <a href="/users" class="btn btn-outline-secondary me-3">
        <i class="bi bi-arrow-left"></i>
    </a>
    <h1 class="mb-0">Supprimer l'utilisateur</h1>
</div>

@if (user is null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-danger text-white">
            <h3 class="mb-0">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                Confirmation de suppression
            </h3>
        </div>
        <div class="card-body">
            <div class="alert alert-warning mb-4">
                <p class="mb-0">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Êtes-vous sûr de vouloir supprimer définitivement cet utilisateur ? Cette action est irréversible.
                </p>
            </div>

            <div class="card bg-light mb-4">
                <div class="card-header">
                    <h4 class="mb-0">Détails de l'utilisateur</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h5 class="card-title">@user.Name @user.LastName</h5>
                            <p class="mb-1"><strong>Pseudo :</strong> @user.Pseudo</p>
                            <p class="mb-1"><strong>Email :</strong> @user.Email</p>
                            <p class="mb-1"><strong>Ville :</strong> @(string.IsNullOrEmpty(user.City) ? "Non spécifiée" : user.City)</p>
                            <p class="mb-0"><strong>Adresse :</strong> @(string.IsNullOrEmpty(user.Address) ? "Non spécifiée" : user.Address)</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1">
                                <strong>Statut du compte :</strong>
                                @if (user.IsAccountActivated)
                                {
                                    <span class="badge bg-success">Activé</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Désactivé</span>
                                }
                            </p>
                            <p class="mb-0"><strong>Rôle :</strong> <span class="badge bg-primary">@userRole</span></p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <a href="/users" class="btn btn-outline-secondary me-2">
                    <i class="bi bi-x-circle me-1"></i>
                    Annuler
                </a>
                <a href="@($"/users/delete/{Id}/confirm")" class="btn btn-danger">
                    <i class="bi bi-trash me-1"></i>
                    <span>Supprimer définitivement</span>
                </a>
            </div>
        </div>
    </div>
}

@if (isDeleting)
{
    <div class="d-flex justify-content-center my-5">
        <div>
            <div class="spinner-border text-danger" role="status">
                <span class="visually-hidden">Suppression...</span>
            </div>
            <p class="mt-2 text-center">Suppression en cours...</p>
        </div>
    </div>
}

@if (errorMessage != string.Empty)
{
    <div class="alert alert-danger">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @((MarkupString)errorMessage)
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "confirm")]
    public bool Confirm { get; set; }

    private User? user;
    private string userRole = "Utilisateur";
    private bool isDeleting = false;
    private string errorMessage = string.Empty;
    private bool shouldDeleteUser = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.Users.FindAsync(Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Récupérer le rôle de l'utilisateur
        var roles = await UserManager.GetRolesAsync(user);
        userRole = roles.FirstOrDefault() ?? "Utilisateur";

        // Vérifier si nous sommes sur la route de confirmation
        var uri = new Uri(NavigationManager.Uri);
        shouldDeleteUser = uri.AbsolutePath.EndsWith($"/confirm");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldDeleteUser && !isDeleting)
        {
            await DeleteUser();
        }
    }

    private async Task DeleteUser()
    {
        if (user == null) return;

        try
        {
            isDeleting = true;
            errorMessage = string.Empty;
            StateHasChanged();

            // Utiliser UserManager pour supprimer l'utilisateur proprement
            var result = await UserManager.DeleteAsync(user);

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/users");
            }
            else
            {
                // Afficher les erreurs de suppression
                errorMessage = "Erreurs lors de la suppression :<ul>";
                foreach (var error in result.Errors)
                {
                    errorMessage += $"<li>{error.Description}</li>";
                }
                errorMessage += "</ul>";
                isDeleting = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Essayer une méthode alternative
            try
            {
                using var context = DbFactory.CreateDbContext();
                var userToDelete = await context.Users.FindAsync(Id);

                if (userToDelete != null)
                {
                    context.Users.Remove(userToDelete);
                    await context.SaveChangesAsync();
                    NavigationManager.NavigateTo("/users");
                }
            }
            catch (Exception innerEx)
            {
                errorMessage = $"Erreur lors de la suppression : {innerEx.Message}";
                isDeleting = false;
                StateHasChanged();
            }
        }
    }
}