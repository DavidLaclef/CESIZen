name: 01 - Integration

on:
    push:
        branches:
            - develop
            - main
    pull_request:
        branches:
            - main

jobs:
    test-and-build:
        name: Test and Build
        uses: ./.github/workflows/01-1_TestAndBuild.yaml
        secrets: inherit

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: [test-and-build]

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '8.0.x'

            - name: Restore dependencies
              run: dotnet restore

            - name: Build
              run: dotnet build --no-restore --configuration Release

            - name: Run tests with coverage
              run: |
                  dotnet test --no-build --configuration Release \
                    --collect:"XPlat Code Coverage" \
                    --results-directory ./TestResults/ \
                    --logger trx \
                    --verbosity normal

            - name: Install dotnet-coverage
              run: dotnet tool install -g dotnet-coverage

            - name: Generate coverage report
              run: |
                  dotnet-coverage merge ./TestResults/**/*.coverage -o ./TestResults/coverage.cobertura.xml -f cobertura

            - name: SonarCloud Scan
              uses: SonarSource/sonarcloud-github-action@master
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                  args: >
                      -Dsonar.projectKey=cesizen
                      -Dsonar.organization=votre-organization
                      -Dsonar.cs.dotcover.reportsPaths=./TestResults/coverage.cobertura.xml
                      -Dsonar.coverage.exclusions=**/*.razor,**/*.cshtml,**/Program.cs,**/Startup.cs

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: [test-and-build]

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: 'fs'
                  scan-ref: '.'
                  format: 'sarif'
                  output: 'trivy-results.sarif'

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: 'trivy-results.sarif'
