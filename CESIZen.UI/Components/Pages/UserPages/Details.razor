@page "/users/details"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using Microsoft.AspNetCore.Identity
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@rendermode InteractiveServer

<PageTitle>Détails de l'utilisateur</PageTitle>

<div class="d-flex align-items-center mb-4">
    <a href="/users" class="btn btn-outline-secondary me-3">
        <i class="bi bi-arrow-left"></i>
    </a>
    <h1 class="mb-0">Détails de l'utilisateur</h1>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        @if (user is null)
        {
            <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label class="form-label fw-bold">Prénom</label>
                        <div class="form-control bg-light">@user.Name</div>
                    </div>
                </div>

                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label class="form-label fw-bold">Nom</label>
                        <div class="form-control bg-light">@user.LastName</div>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <div class="form-group">
                    <label class="form-label fw-bold">Pseudo</label>
                    <div class="form-control bg-light">@user.Pseudo</div>
                    <div class="form-text">Le pseudo est utilisé pour l'identification de l'utilisateur sur la plateforme.</div>
                </div>
            </div>

            <div class="mb-4">
                <div class="form-group">
                    <label class="form-label fw-bold">Email</label>
                    <div class="form-control bg-light">@user.Email</div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label class="form-label fw-bold">Ville</label>
                        <div class="form-control bg-light">@(string.IsNullOrEmpty(user.City) ? "Non renseigné" : user.City)</div>
                    </div>
                </div>

                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label class="form-label fw-bold">Adresse</label>
                        <div class="form-control bg-light">@(string.IsNullOrEmpty(user.Address) ? "Non renseigné" : user.Address)</div>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <div class="d-flex align-items-center">
                    <label class="form-label fw-bold me-3 mb-0">État du compte</label>
                    @if (user.IsAccountActivated)
                    {
                        <span class="badge bg-success">Activé</span>
                    }
                    else
                    {
                        <span class="badge bg-danger">Désactivé</span>
                    }
                </div>
                <div class="form-text">Indique si le compte de l'utilisateur est actif ou désactivé.</div>
            </div>

            @if (userRole != null)
            {
                <div class="mb-4">
                    <label class="form-label fw-bold">Rôle</label>
                    <div class="form-control bg-light">@userRole</div>
                    <div class="form-text">Le rôle définit les permissions de l'utilisateur sur la plateforme.</div>
                </div>
            }

            <div class="d-flex justify-content-end mt-4">
                <a href="/users" class="btn btn-outline-secondary me-2">
                    <i class="bi bi-arrow-left"></i> Retour à la liste
                </a>
                <a href="@($"/users/edit?id={user.Id}")" class="btn btn-primary">
                    <i class="bi bi-pencil me-1"></i> Modifier
                </a>
            </div>
        }
    </div>
</div>

@code {
    private User? user;
    private string? userRole;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Récupérer le rôle de l'utilisateur
        if (UserManager != null)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRole = roles.FirstOrDefault() ?? "Citoyen";
        }
    }
}