@page "/categoriesRelaxingActivity"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using CESIZen.Data.Context
@implements IAsyncDisposable
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Catégories</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Catégories</h1>
    <div>
        <a href="categories/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Créer une nouvelle catégorie
        </a>
    </div>
</div>

@* LISTE DES CATÉGORIES *@
<div class="card shadow-sm">
    <div class="list-group list-group-flush">
        @foreach (var category in allCategories)
        {
            <div class="list-group-item list-group-item-action p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1">@category.Name</h5>
                        <p class="small text-muted mb-0">
                            <i class="bi bi-collection"></i>
                            @(categoriesCount.GetValueOrDefault(category.Id, 0)) ressource(s) associée(s)
                        </p>
                    </div>
                    <div>
                        <div class="btn-group btn-group-sm">
                            <a href="@($"categoriesInformation/edit/{category.Id}")" class="btn btn-outline-secondary">
                                <i class="bi bi-pencil"></i> Modifier
                            </a>
                            <a href="@($"categoriesInformation/delete/{category.Id}")" class="btn btn-outline-danger">
                                <i class="bi bi-trash"></i> Supprimer
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@if (showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmer la suppression</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer la catégorie <strong>@categoryToDelete?.Name</strong> ?</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-triangle"></i> Cette action est irréversible et peut affecter les éléments associées à cette catégorie.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteCategory">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private CESIZenDbContext context = default!;
    private List<CategoryRelaxingActivity> allCategories = new List<CategoryRelaxingActivity>();
    private Dictionary<int, int> categoriesCount = new Dictionary<int, int>();
    private string sortBy = "name";
    private bool showDeleteModal = false;
    private CategoryRelaxingActivity categoryToDelete;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadData();
    }

    private async Task LoadData()
    {
        allCategories = await context.CategoriesRelaxingActivity.ToListAsync();

        // Charger le nombre d'activités pour chaque catégorie
        var activities = await context.RelaxingActivities.ToListAsync();
        categoriesCount = activities
            .GroupBy(r => r.CategoryId)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void ConfirmDelete(CategoryRelaxingActivity category)
    {
        categoryToDelete = category;
        showDeleteModal = true;
    }

    private async Task DeleteCategory()
    {
        if (categoryToDelete != null)
        {
            context.CategoriesRelaxingActivity.Remove(categoryToDelete);
            await context.SaveChangesAsync();
            await LoadData();
        }

        showDeleteModal = false;
        categoryToDelete = null;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        categoryToDelete = null;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}