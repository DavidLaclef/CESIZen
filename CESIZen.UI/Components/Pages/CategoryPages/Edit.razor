@page "/categories/edit/{id:int}"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Modifier une catégorie</PageTitle>

<div class="d-flex align-items-center mb-4">
    <a href="/categories" class="btn btn-outline-secondary me-3">
        <i class="bi bi-arrow-left"></i>
    </a>
    <h1 class="mb-0">Modifier la catégorie</h1>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        @if (Category is null)
        {
            <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
            </div>
        }
        else
        {
            <EditForm method="post" Model="Category" OnValidSubmit="UpdateCategory" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" role="alert" />

                <input type="hidden" name="Category.Id" value="@Category.Id" />

                <div class="mb-4">
                    <label for="name" class="form-label fw-bold">Nom de la catégorie <span class="text-danger">*</span></label>
                    <InputText id="name" @bind-Value="Category.Name" class="form-control form-control-lg" placeholder="Entrez le nom de la catégorie" />
                    <ValidationMessage For="() => Category.Name" class="text-danger" />
                    <div class="form-text">Le nom de la catégorie sera utilisé pour classer vos ressources.</div>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <a href="/categories" class="btn btn-outline-secondary me-2">Annuler</a>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle me-1"></i> Enregistrer les modifications
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Category? Category { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Category ??= await context.Categories.FirstOrDefaultAsync(m => m.Id == Id);

        if (Category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Category!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CategoryExists(Category!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/categories");
    }

    private bool CategoryExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Categories.Any(e => e.Id == id);
    }
}