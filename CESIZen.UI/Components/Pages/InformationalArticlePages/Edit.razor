@page "/informationalArticles/edit"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using CESIZen.Data.Enums
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Modifier une ressource</PageTitle>

<div class="container-fluid py-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Modifier une ressource</h2>
        </div>

        @if (informationalArticle is null)
        {
            <div class="card-body">
                <div class="d-flex justify-content-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card-body">
                <EditForm method="post" Model="informationalArticle" OnValidSubmit="UpdateInformationalArticle" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" class="alert alert-danger" />

                    <input type="hidden" name="informationalArticle.Id" value="@informationalArticle.Id" />

                    <div class="row mb-4">
                        <div class="col-md-12">
                            <div class="form-group mb-4">
                                <label for="name" class="form-label fw-bold">Nom de la ressource <span class="text-danger">*</span></label>
                                <InputText id="name" @bind-Value="informationalArticle.Title" class="form-control form-control-lg" placeholder="Nom de l'article'" />
                                <ValidationMessage For="() => informationalArticle.Title" class="text-danger" />
                            </div>

                            <div class="form-group mb-4">
                                <label for="description" class="form-label fw-bold">Description <span class="text-danger">*</span></label>
                                <InputTextArea id="description" @bind-Value="informationalArticle.Content" class="form-control" rows="5" placeholder="Contenu de l'article..." />
                                <ValidationMessage For="() => informationalArticle.Content" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <div class="row mb-4">
   
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label for="categoryid" class="form-label fw-bold">Catégorie <span class="text-danger">*</span></label>
                                <InputSelect id="categoryid" @bind-Value="informationalArticle.CategoryId" class="form-select" required>
                                    <option value="">Sélectionner une catégorie</option>
                                    @if (Categories != null)
                                    {
                                        @foreach (var category in Categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => informationalArticle.CategoryId" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between border-top pt-4">
                        <a href="@($"/informationalArticles")" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left"></i> Retour à la liste
                        </a>
                        <div>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle"></i> Enregistrer les modifications
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private InformationalArticle? informationalArticle { get; set; }

    private List<CategoryInformation>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        informationalArticle ??= await context.InformationalArticles.FirstOrDefaultAsync(m => m.Id == Id);

        if (informationalArticle is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Categories = await context.CategoriesInformation.ToListAsync();
    }

    private async Task UpdateInformationalArticle()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(informationalArticle!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ResourceExists(informationalArticle!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/resources");
    }

    private bool ResourceExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.InformationalArticles.Any(e => e.Id == id);
    }
}
