name: 02-2 - Deploy to Azure VM
on:
  workflow_call

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: ./deployment/

      - name: Setup SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          ssh -o ConnectTimeout=10 -i ~/.ssh/id_rsa ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "echo 'SSH connection successful'"

      - name: Copy deployment files to server
        run: |
          scp -i ~/.ssh/id_rsa -r ./deployment/* ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:~/cesizen/

      - name: Create deployment script locally
        run: |
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          cd ~/cesizen
          
          echo "🔍 Variables d'environnement:"
          echo "REGISTRY: ${{ env.REGISTRY }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          
          export SQL_SERVER_PASSWORD="${{ secrets.SQL_SERVER_PASSWORD }}"
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          if command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE="docker-compose"
          elif docker compose version &> /dev/null; then
            DOCKER_COMPOSE="docker compose"
          else
            echo "Installation de docker-compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            DOCKER_COMPOSE="docker-compose"
          fi
          echo "✅ Utilisation de: $DOCKER_COMPOSE"
          
          cp docker-compose.yml docker-compose.yml.backup
          
          echo "🔄 Mise à jour de l'image UI dans docker-compose.yml"
          sed -i 's|image: \${DOCKER_REGISTRY-}cesizenui|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ui:latest|g' docker-compose.yml
          sed -i 's|ghcr.io/votre-username/cesizen-ui:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ui:latest|g' docker-compose.yml
          
          echo "📄 Images dans docker-compose.yml:"
          grep "image:" docker-compose.yml || echo "Aucune ligne 'image:' trouvée"
          
          echo "🚀 Début du déploiement..."
          $DOCKER_COMPOSE down || true
          docker system prune -f
          $DOCKER_COMPOSE pull
          $DOCKER_COMPOSE up -d
          sleep 30
          
          echo "🔍 État des services:"
          $DOCKER_COMPOSE ps
          
          RUNNING_SERVICES=$($DOCKER_COMPOSE ps -q | wc -l)
          echo "Services en cours: $RUNNING_SERVICES"
          
          if [ "$RUNNING_SERVICES" -lt 1 ]; then
            echo "❌ Erreur de déploiement"
            $DOCKER_COMPOSE logs --tail=50
            exit 1
          else
            echo "✅ Services opérationnels"
          fi
          EOF
          chmod +x deploy_script.sh

      - name: Copy and execute deployment script
        run: |
          scp -i ~/.ssh/id_rsa deploy_script.sh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:~/
          ssh -i ~/.ssh/id_rsa ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "bash ~/deploy_script.sh"

      - name: Health check
        run: |
          sleep 60
          if curl -f -s --max-time 30 http://${{ secrets.AZURE_VM_HOST }}/ > /dev/null; then
            echo "✅ Application UI accessible"
          else
            echo "❌ Application UI non accessible"
            exit 1
          fi

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Déploiement réussi!"
          echo "🌐 Application disponible sur: http://${{ secrets.AZURE_VM_HOST }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Échec du déploiement"
          echo "Consultez les logs pour plus de détails"