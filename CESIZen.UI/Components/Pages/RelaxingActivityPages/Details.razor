@page "/resources/details"
@using Microsoft.EntityFrameworkCore
@using R2.Data.Entities
@using R2.Data.Enums
@inject IDbContextFactory<R2.Data.Context.R2DbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Détails de la ressource</PageTitle>

@if (resource is null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">@resource.Name</h3>
            <span class="badge bg-light text-dark">
                @GetTypeDisplayName(resource.Type)
            </span>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-8">
                    <div class="mb-4">
                        <h4>Description</h4>
                        <p class="lead">@resource.Description</p>
                    </div>

                    <!-- Section commentaires -->
                    <div class="mb-4">
                        <h4>Commentaires</h4>
                        @if (comments != null && comments.Any())
                        {
                            <div class="list-group mb-3">
                                @foreach (var comment in comments)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h6 class="mb-1">Utilisateur</h6>
                                            <small>Date</small>
                                        </div>
                                        <p class="mb-1">@comment.Content</p>
                                        <div class="d-flex justify-content-end gap-2">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ReplyToComment(comment)">
                                                <i class="bi bi-reply"></i> Répondre
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted fst-italic">Aucun commentaire pour le moment.</p>
                        }

                        <!-- Formulaire d'ajout de commentaire -->
                        <AuthorizeView>
                            <Authorized>
                                <!-- Affichage pour les utilisateurs authentifiés -->
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">Ajouter un commentaire</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <textarea class="form-control" rows="3" @bind="newCommentContent" placeholder="Votre commentaire..."></textarea>
                                        </div>
                                        <button class="btn btn-primary" @onclick="AddComment">
                                            <i class="bi bi-send"></i> Envoyer
                                        </button>
                                    </div>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>

                <div class="col-md-4">
                    <!-- Informations sur la ressource -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">Informations</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Statut</span>
                                <span class="badge @GetStatusBadgeClass(resource.Status)">
                                    @GetStatusDisplayName(resource.Status)
                                </span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Catégorie</span>
                                <span>@(resource.Category?.Name ?? "Non catégorisé")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Date de création</span>
                                <span>@resource.CreationDate.ToString("dd/MM/yyyy")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Créateur</span>
                                <span>Nom du créateur</span>
                            </li>
                        </ul>
                    </div>

                    <AuthorizeView>
                        <Authorized>
                            <!-- Actions -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h5 class="mb-0">Actions</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-grid gap-2">
                                        <!-- Actions principales -->
                                        <button class="btn btn-outline-primary" @onclick="ToggleFavorite">
                                            <i class="bi bi-star@(isFavorite ? "-fill" : "")"></i>
                                            @(isFavorite ? "Retirer des favoris" : "Ajouter aux favoris")
                                        </button>
                                        <button class="btn btn-outline-success" @onclick="ToggleExploited">
                                            <i class="bi bi-check-circle@(isExploited ? "-fill" : "")"></i>
                                            @(isExploited ? "Marquer comme non exploitée" : "Marquer comme exploitée")
                                        </button>
                                        <button class="btn btn-outline-info" @onclick="ShareResource">
                                            <i class="bi bi-share"></i> Partager
                                        </button>

                                        @if (resource.Status == ResourceStatus.Draft)
                                        {
                                            <button class="btn btn-outline-warning" @onclick="PublishResource">
                                                <i class="bi bi-upload"></i> Publier
                                            </button>
                                        }

                                        <!-- Suppression (admins seulement) -->
                                        <div class="dropdown">
                                            <a href="@($"resources/delete/{resource.Id}")" class="btn btn-outline-danger">
                                                <i class="bi bi-trash"></i> Supprimer
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Progression -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h5 class="mb-0">Progression</h5>
                                </div>
                                <div class="card-body">
                                    @if (progression != null)
                                    {
                                        <div class="mb-3">
                                            <div class="d-flex justify-content-between mb-1">
                                                <span>Avancement</span>
                                                <span>@progression.Percentage%</span>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @progression.Percentage%"
                                                     aria-valuenow="@progression.Percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                        <div class="text-muted small">
                                            <div>Statut: @GetProgressionStatusDisplayName(progression.Status)</div>
                                            <div>Dernière interaction: @progression.LastInteractionDate.ToString("dd/MM/yyyy")</div>
                                        </div>
                                        <div class="mt-3">
                                            <button class="btn btn-sm btn-outline-primary w-100" @onclick="UpdateProgression">
                                                <i class="bi bi-arrow-clockwise"></i> Mettre à jour la progression
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted">Aucune progression enregistrée.</p>
                                        <button class="btn btn-sm btn-outline-primary w-100" @onclick="StartProgression">
                                            <i class="bi bi-play"></i> Démarrer
                                        </button>
                                    }
                                </div>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a href="/resources" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Retour à la liste
            </a>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Resource? resource;
    private Category? category;
    private List<Comment>? comments;
    private Progression? progression;
    private bool showDeleteModal = false;
    private bool showShareModal = false;
    private string shareUrl = "";
    private string shareEmail = "";
    private string newCommentContent = "";

    // États de la ressource pour l'utilisateur actuel
    private bool isFavorite = false;
    private bool isExploited = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Chargement de la ressource avec sa catégorie
        resource = await context.Ressources
            .Include(r => r.Category)
            .FirstOrDefaultAsync(r => r.Id == Id);

        if (resource is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Chargement des commentaires associés à cette ressource
        // TODO relation entre Comment et Resource dans le modèle
        comments = await context.Comments
            .Where(c => c.Id == Id) // À adapter selon votre modèle
            .ToListAsync();

        // Chargement de la progression de l'utilisateur actuel pour cette ressource
        // TODO relation entre Progression, User et Resource dans le modèle
        progression = await context.Progressions
            .FirstOrDefaultAsync(p => p.Id == Id); // À adapter selon votre modèle

        // Génération de l'URL de partage
        shareUrl = $"{NavigationManager.BaseUri}resources/details?id={Id}";
    }

    private string GetStatusDisplayName(ResourceStatus status)
    {
        return status switch
        {
            ResourceStatus.Private => "Privé",
            ResourceStatus.Public => "Public",
            ResourceStatus.Draft => "Brouillon",
            _ => status.ToString()
        };
    }

    private string GetTypeDisplayName(ResourceType type)
    {
        return type switch
        {
            ResourceType.Activity => "Activité",
            ResourceType.Game => "Jeu",
            ResourceType.Document => "Document",
            _ => type.ToString()
        };
    }

    private string GetProgressionStatusDisplayName(ProgressionStatus status)
    {
        return status switch
        {
            ProgressionStatus.NotStarted => "Non commencé",
            ProgressionStatus.InProgress => "En cours",
            ProgressionStatus.Completed => "Terminé",
            _ => status.ToString()
        };
    }

    private string GetStatusBadgeClass(ResourceStatus status)
    {
        return status switch
        {
            ResourceStatus.Private => "bg-secondary",
            ResourceStatus.Public => "bg-success",
            ResourceStatus.Draft => "bg-warning",
            _ => "bg-info"
        };
    }

    private void ConfirmDelete()
    {
        showDeleteModal = true;
    }

    private async Task DeleteResource()
    {
        using var context = DbFactory.CreateDbContext();
        context.Ressources.Remove(resource!);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/resources");
        showDeleteModal = false;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentContent))
            return;

        using var context = DbFactory.CreateDbContext();

        var comment = new Comment
        {
            Content = newCommentContent
        };

        context.Comments.Add(comment);
        await context.SaveChangesAsync();

        // Rafraîchir la liste des commentaires
        comments = await context.Comments
            .Where(c => c.Id == Id)
            .ToListAsync();

        newCommentContent = "";
    }

    private void ReplyToComment(Comment comment)
    {
        // TODO : Logique pour répondre à un commentaire
        newCommentContent = $"En réponse à: {comment.Content}\n";
    }

    private async Task ToggleFavorite()
    {
        isFavorite = !isFavorite;

        // TODO : Logique pour ajouter/retirer des favoris
    }

    private void ShareResource()
    {
        showShareModal = true;
    }

    private async Task ToggleExploited()
    {
        isExploited = !isExploited;

        // TODO : Logique pour marquer comme exploitée/non exploitée
    }

    private async Task PublishResource()
    {
        if (resource != null && resource.Status == ResourceStatus.Draft)
        {
            using var context = DbFactory.CreateDbContext();

            resource.Status = ResourceStatus.Public;
            context.Attach(resource).State = EntityState.Modified;

            await context.SaveChangesAsync();

            // Rafraîchir l'affichage
            await OnInitializedAsync();
        }
    }

    private async Task StartProgression()
    {
        using var context = DbFactory.CreateDbContext();

        progression = new Progression
        {
            Percentage = 0,
            Status = ProgressionStatus.InProgress,
            LastInteractionDate = DateTime.Now
            // TODO : Ajouter propriétés pour lier la progression à la ressource et à l'utilisateur
        };

        context.Progressions.Add(progression);
        await context.SaveChangesAsync();
    }

    private async Task UpdateProgression()
    {
        // TODO : Ouvrir un dialogue pour mettre à jour la progression
    }
}