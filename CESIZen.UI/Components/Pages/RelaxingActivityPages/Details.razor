@page "/relaxingActivities/details"
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using CESIZen.Data.Enums
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Détails de l'activité</PageTitle>

@if (relaxingActivity is null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">@relaxingActivity.Name</h3>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-8">
                    <div class="mb-4">
                        <h4>Description</h4>
                        <p class="lead">@relaxingActivity.Description</p>
                    </div>

                </div>
            </div>

            <div class="col-md-4">
                <!-- Informations sur l'activité -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Informations</h5>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Statut</span>
                            <span class="badge @GetDifficultyLevelBadgeClass(relaxingActivity.DifficultyLevel)">
                                @GetDifficultyLevelDisplayName(relaxingActivity.DifficultyLevel)
                            </span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Catégorie</span>
                            <span>@(relaxingActivity.Category?.Name ?? "Non catégorisé")</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Date de création</span>
                            <span>@relaxingActivity.CreationDate.ToString("dd/MM/yyyy")</span>
                        </li>
                    </ul>
                </div>

                <AuthorizeView>
                    <Authorized>
                        <!-- Actions -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Actions</h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <!-- Actions principales -->
                                    <button class="btn btn-outline-primary" @onclick="ToggleFavorite">
                                        <i class="bi bi-star@(isFavorite ? "-fill" : "")"></i>
                                        @(isFavorite ? "Retirer des favoris" : "Ajouter aux favoris")
                                    </button>

                                    <!-- Suppression (admins seulement) -->
                                    <div class="dropdown">
                                        <a href="@($"relaxingActivities/delete/{relaxingActivity.Id}")" class="btn btn-outline-danger">
                                            <i class="bi bi-trash"></i> Supprimer
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <a href="/relaxingActivities" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Retour à la liste
        </a>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private RelaxingActivity? relaxingActivity;
    private CategoryRelaxingActivity? category;
    private bool showDeleteModal = false;

    // États de l'activité pour l'utilisateur actuel
    private bool isFavorite = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        relaxingActivity = await context.RelaxingActivities
            .Include(r => r.Category)
            .FirstOrDefaultAsync(r => r.Id == Id);

        if (relaxingActivity is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
    }

    private string GetDifficultyLevelDisplayName(DifficultyLevel difficultyLevel)
    {
        return difficultyLevel switch
        {
            DifficultyLevel.Begginer => "Débutant",
            DifficultyLevel.Intermediate => "Intermédiaire",
            DifficultyLevel.Advanced => "Avancé",
            _ => "Inconnu"
        };
    }

    private string GetDifficultyLevelBadgeClass(DifficultyLevel difficultyLevel)
    {
        return difficultyLevel switch
        {
            DifficultyLevel.Begginer => "bg-secondary",
            DifficultyLevel.Intermediate => "bg-success",
            DifficultyLevel.Advanced => "bg-warning",
            _ => "bg-info"
        };
    }

    private void ConfirmDelete()
    {
        showDeleteModal = true;
    }

    private async Task DeleteActivity()
    {
        using var context = DbFactory.CreateDbContext();
        context.RelaxingActivities.Remove(relaxingActivity!);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/relaxingActivities");
        showDeleteModal = false;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
    }

    private async Task ToggleFavorite()
    {
        isFavorite = !isFavorite;

        // TODO : Logique pour ajouter/retirer des favoris
    }

}