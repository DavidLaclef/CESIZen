@page "/register"
@using Microsoft.AspNetCore.Identity
@using CESIZen.Data.Entities
@using System.ComponentModel.DataAnnotations
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<PageTitle>Inscription - (Re)Sources Relationnelles</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header bg-primary text-white text-center py-4">
                    <h2 class="mb-0 fs-4">
                        <i class="bi bi-person-plus me-2"></i>Créer un compte
                    </h2>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle-fill fs-5 me-2"></i>
                                <div>@((MarkupString)ErrorMessage)</div>
                            </div>
                        </div>
                    }

                    <EditForm Model="@this" OnValidSubmit="CreateUserAsync" FormName="RegisterForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-4" role="alert" />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="name" @bind-Value="Name" class="form-control" placeholder="Prénom" />
                                    <label for="name">Prénom</label>
                                    <ValidationMessage For="() => Name" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="lastname" @bind-Value="LastName" class="form-control" placeholder="Nom" />
                                    <label for="lastname">Nom</label>
                                    <ValidationMessage For="() => LastName" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="email" @bind-Value="Email" class="form-control" placeholder="Email" />
                                    <label for="email">Email</label>
                                    <ValidationMessage For="() => Email" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="pseudo" @bind-Value="Pseudo" class="form-control" placeholder="Pseudo" />
                                    <label for="pseudo">Pseudo</label>
                                    <ValidationMessage For="() => Pseudo" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="city" @bind-Value="City" class="form-control" placeholder="Ville" />
                                    <label for="city">Ville (facultatif)</label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="address" @bind-Value="Address" class="form-control" placeholder="Adresse" />
                                    <label for="address">Adresse (facultatif)</label>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="password" type="password" @bind-Value="Password" class="form-control" placeholder="Mot de passe" />
                                    <label for="password">Mot de passe</label>
                                    <ValidationMessage For="() => Password" class="text-danger" />
                                </div>
                                <div class="form-text small mt-1">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Le mot de passe doit contenir au moins 8 caractères, dont une majuscule, une minuscule,
                                    un chiffre et un caractère spécial.
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="confirmPassword" type="password" @bind-Value="ConfirmPassword" class="form-control" placeholder="Confirmer le mot de passe" />
                                    <label for="confirmPassword">Confirmer le mot de passe</label>
                                    <ValidationMessage For="() => ConfirmPassword" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@IsProcessing">
                                @if (IsProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Inscription en cours...</span>
                                }
                                else
                                {
                                    <i class="bi bi-person-plus me-2"></i>
                                    <span>S'inscrire</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer bg-light text-center py-3">
                    <div class="text-muted mb-2">Vous avez déjà un compte ?</div>
                    <a href="login" class="btn btn-outline-primary">
                        <i class="bi bi-box-arrow-in-right me-2"></i>Se connecter
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsProcessing { get; set; } = false;
    private bool IsSuccess { get; set; } = false;

    [Required(ErrorMessage = "L'email est requis")]
    [EmailAddress(ErrorMessage = "Format d'email invalide")]
    [SupplyParameterFromForm]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Le prénom est requis")]
    [SupplyParameterFromForm]
    public string Name { get; set; } = string.Empty;

    [Required(ErrorMessage = "Le nom est requis")]
    [SupplyParameterFromForm]
    public string LastName { get; set; } = string.Empty;

    [Required(ErrorMessage = "Le pseudo est requis")]
    [SupplyParameterFromForm]
    public string Pseudo { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public string? City { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public string? Address { get; set; } = string.Empty;

    [Required(ErrorMessage = "Le mot de passe est requis")]
    [StringLength(100, ErrorMessage = "Le {0} doit faire au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 8)]
    [SupplyParameterFromForm]
    public string Password { get; set; } = string.Empty;

    [Required(ErrorMessage = "La confirmation du mot de passe est requise")]
    [Compare("Password", ErrorMessage = "Les mots de passe ne correspondent pas.")]
    [SupplyParameterFromForm]
    public string ConfirmPassword { get; set; } = string.Empty;

    private void ResetForm()
    {
        Email = string.Empty;
        Name = string.Empty;
        LastName = string.Empty;
        Pseudo = string.Empty;
        City = string.Empty;
        Address = string.Empty;
        Password = string.Empty;
        ConfirmPassword = string.Empty;
    }

    private async Task CreateUserAsync()
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;
            IsSuccess = false;

            if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Password) ||
                string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(LastName) ||
                string.IsNullOrEmpty(Pseudo))
            {
                ErrorMessage = "Veuillez remplir tous les champs obligatoires.";
                IsProcessing = false;
                return;
            }

            if (Password != ConfirmPassword)
            {
                ErrorMessage = "Les mots de passe ne correspondent pas.";
                IsProcessing = false;
                return;
            }

            var existingUser = await UserManager.FindByNameAsync(Pseudo);
            if (existingUser != null)
            {
                ErrorMessage = "Ce pseudo est déjà utilisé. Veuillez en choisir un autre.";
                IsProcessing = false;
                return;
            }

            var existingEmail = await UserManager.FindByEmailAsync(Email);
            if (existingEmail != null)
            {
                ErrorMessage = "Cet email est déjà utilisé. Veuillez en utiliser un autre ou vous connecter.";
                IsProcessing = false;
                return;
            }

            var user = new User
            {
                UserName = Pseudo,
                Email = Email,
                Name = Name,
                LastName = LastName,
                Pseudo = Pseudo,
                City = City ?? string.Empty,
                Address = Address ?? string.Empty,
                IsAccountActivated = true,
                EmailConfirmed = true
            };

            Logger.LogInformation($"Tentative d'inscription: {user.Email}");

            var result = await UserManager.CreateAsync(user, Password);

            if (result.Succeeded)
            {
                Logger.LogInformation($"Utilisateur inscrit avec succès: {user.Email}");

                var roleResult = await UserManager.AddToRoleAsync(user, "Citoyen");

                if (roleResult.Succeeded)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false);

                    ResetForm();

                    IsSuccess = true;
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    var roleErrorDetails = string.Join("<br/>", roleResult.Errors.Select(e => e.Description));
                    ErrorMessage = $"Compte créé mais erreur lors de l'attribution du rôle:<br/>{roleErrorDetails}";
                    Logger.LogError($"Erreur lors de l'attribution du rôle: {roleErrorDetails}");
                }
            }
            else
            {
                var errorDetails = string.Join("<br/>", result.Errors.Select(e => e.Description));
                ErrorMessage = $"Erreur lors de l'inscription:<br/>{errorDetails}";
                Logger.LogError($"Erreur lors de l'inscription: {errorDetails}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception lors de l'inscription");
            ErrorMessage = $"Une erreur s'est produite: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }
}