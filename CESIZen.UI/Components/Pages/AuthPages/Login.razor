@page "/login"
@using Microsoft.AspNetCore.Identity
@using CESIZen.Data.Entities
@using System.ComponentModel.DataAnnotations
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Connexion - (Re)Sources Relationnelles</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header bg-primary text-white text-center py-4">
                    <h2 class="mb-0 fs-4">
                        <i class="bi bi-box-arrow-in-right me-2"></i>Connexion
                    </h2>
                </div>
                <div class="card-body p-4 p-md-5">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle-fill fs-5 me-2"></i>
                                <div>@ErrorMessage</div>
                            </div>
                        </div>
                    }

                    <EditForm Model="@this" OnValidSubmit="LoginUser" FormName="loginForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-4">
                            <InputText id="username" @bind-Value="UserNameOrEmail" class="form-control" placeholder="Email ou Pseudo" />
                            <label for="username">Email ou Pseudo</label>
                            <ValidationMessage For="@(() => UserNameOrEmail)" class="text-danger" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText id="password" @bind-Value="Password" class="form-control" type="password" placeholder="Mot de passe" />
                            <label for="password">Mot de passe</label>
                            <ValidationMessage For="@(() => Password)" class="text-danger" />
                        </div>

                        <div class="form-check mb-4">
                            <InputCheckbox id="rememberMe" @bind-Value="RememberMe" class="form-check-input" />
                            <label class="form-check-label" for="rememberMe">Se souvenir de moi</label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@IsProcessing">
                                @if (IsProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Connexion en cours...</span>
                                }
                                else
                                {
                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                    <span>Se connecter</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer bg-light text-center py-3">
                    <div class="text-muted mb-2">Vous n'avez pas encore de compte ?</div>
                    <a href="register" class="btn btn-outline-primary">
                        <i class="bi bi-person-plus me-2"></i>Créer un compte
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsProcessing { get; set; } = false;
    private bool IsSuccess { get; set; } = false;

    [Required(ErrorMessage = "L'email ou le pseudo est requis")]
    [SupplyParameterFromForm]
    public string UserNameOrEmail { get; set; } = string.Empty;

    [Required(ErrorMessage = "Le mot de passe est requis")]
    [DataType(DataType.Password)]
    [SupplyParameterFromForm]
    public string Password { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public bool RememberMe { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsSuccess)
        {
            await Task.Delay(1500);
            await JSRuntime.InvokeVoidAsync("window.location.href", "/");
        }
    }

    private async Task LoginUser()
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = string.Empty;
            IsSuccess = false;

            if (string.IsNullOrEmpty(UserNameOrEmail) || string.IsNullOrEmpty(Password))
            {
                ErrorMessage = "Veuillez remplir tous les champs obligatoires.";
                IsProcessing = false;
                return;
            }

            var userByEmail = await UserManager.FindByEmailAsync(UserNameOrEmail);
            var userByName = await UserManager.FindByNameAsync(UserNameOrEmail);

            var user = userByEmail ?? userByName;

            if (user == null)
            {
                ErrorMessage = "Nom d'utilisateur ou mot de passe incorrect.";
                IsProcessing = false;
                return;
            }

            if (!user.IsAccountActivated)
            {
                ErrorMessage = "Impossible de se connecter à ce compte, il est actuellement désactivé.";
                IsProcessing = false;
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(user.UserName, Password, RememberMe, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Logger.LogInformation($"Utilisateur connecté avec succès: {user.UserName}");
                IsSuccess = true;
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning($"L'utilisateur {user.UserName} est verrouillé.");
                ErrorMessage = "Votre compte est verrouillé. Veuillez réessayer plus tard.";
            }
            else if (result.RequiresTwoFactor)
            {
                Logger.LogInformation($"L'utilisateur {user.UserName} nécessite une authentification à deux facteurs.");
                ErrorMessage = "L'authentification à deux facteurs est requise mais n'est pas encore prise en charge.";
            }
            else
            {
                Logger.LogWarning($"Échec de la connexion pour l'utilisateur {user.UserName}");
                ErrorMessage = "Nom d'utilisateur ou mot de passe incorrect.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception lors de la connexion");
            ErrorMessage = $"Une erreur est survenue: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }

        if (IsSuccess)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}