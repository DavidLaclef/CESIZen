name: 02-1 - Docker Build and Push

on:
  workflow_call

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for UI
        id: meta-ui
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ui
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: CESIZen.UI/Dockerfile
          push: true
          tags: ${{ steps.meta-ui.outputs.tags }}
          labels: ${{ steps.meta-ui.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Generate deployment artifacts
        run: |
          mkdir -p deployment-artifacts

          # Copier les fichiers de d√©ploiement
          cp docker-compose.yml deployment-artifacts/
          cp -r nginx deployment-artifacts/

          # Cr√©er un script de d√©ploiement
          cat > deployment-artifacts/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "üöÄ D√©but du d√©ploiement CESIZen..."

          # Variables
          COMPOSE_FILE="docker-compose.yml"
          BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"

          # Cr√©er le r√©pertoire de sauvegarde
          mkdir -p "$BACKUP_DIR"

          # Sauvegarder la base de donn√©es si elle existe
          if docker container inspect cesizen_sqlserver >/dev/null 2>&1; then
              echo "üì¶ Sauvegarde de la base de donn√©es..."
              docker exec cesizen_sqlserver /opt/mssql-tools/bin/sqlcmd \
                  -S localhost -U sa -P "${SQL_SERVER_PASSWORD:-Strong!Passw0rd}" \
                  -Q "BACKUP DATABASE [CESIZenDatabase] TO DISK = '/tmp/backup.bak'" || true
              docker cp cesizen_sqlserver:/tmp/backup.bak "$BACKUP_DIR/" || true
          fi

          # Arr√™ter les services existants
          echo "‚èπÔ∏è Arr√™t des services existants..."
          docker-compose -f "$COMPOSE_FILE" down || true

          # Nettoyer les images obsol√®tes
          echo "üßπ Nettoyage des images obsol√®tes..."
          docker system prune -f || true

          # T√©l√©charger les nouvelles images
          echo "üì• T√©l√©chargement des nouvelles images..."
          docker-compose -f "$COMPOSE_FILE" pull

          # D√©marrer les services
          echo "üîÑ D√©marrage des services..."
          docker-compose -f "$COMPOSE_FILE" up -d

          # Attendre que les services soient pr√™ts
          echo "‚è≥ Attente de la disponibilit√© des services..."
          sleep 30

          # V√©rifier le statut des services
          echo "üîç V√©rification du statut des services..."
          docker-compose -f "$COMPOSE_FILE" ps

          # Test de sant√© basique
          echo "üè• Test de sant√© des services..."
          timeout 60 bash -c 'until curl -sf http://localhost:80/health 2>/dev/null; do sleep 2; done' || echo "‚ö†Ô∏è Service UI non accessible"
          timeout 60 bash -c 'until curl -sf http://localhost:5000/health 2>/dev/null; do sleep 2; done' || echo "‚ö†Ô∏è Service API non accessible"

          echo "‚úÖ D√©ploiement termin√©!"
          echo "üåê Application disponible sur : http://$(hostname -I | awk '{print $1}')"
          EOF

          chmod +x deployment-artifacts/deploy.sh

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts/
          retention-days: 30