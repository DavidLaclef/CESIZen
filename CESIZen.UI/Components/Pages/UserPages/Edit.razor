@page "/users/edit"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole<int>> RoleManager

<PageTitle>Modifier un utilisateur</PageTitle>

<div class="d-flex align-items-center mb-4">
    <a href="/users" class="btn btn-outline-secondary me-3">
        <i class="bi bi-arrow-left"></i>
    </a>
    <h1 class="mb-0">Modifier l'utilisateur</h1>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        @if (User is null)
        {
            <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
            </div>
        }
        else
        {
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" role="alert" />

                <input type="hidden" name="User.Id" value="@User.Id" />

                <div class="row">
                    <div class="col-md-6 mb-4">
                        <label for="name" class="form-label fw-bold">Prénom <span class="text-danger">*</span></label>
                        <InputText id="name" @bind-Value="User.Name" class="form-control" placeholder="Entrez le prénom" />
                        <ValidationMessage For="() => User.Name" class="text-danger" />
                    </div>

                    <div class="col-md-6 mb-4">
                        <label for="lastname" class="form-label fw-bold">Nom <span class="text-danger">*</span></label>
                        <InputText id="lastname" @bind-Value="User.LastName" class="form-control" placeholder="Entrez le nom" />
                        <ValidationMessage For="() => User.LastName" class="text-danger" />
                    </div>
                </div>

                <div class="mb-4">
                    <label for="pseudo" class="form-label fw-bold">Pseudo <span class="text-danger">*</span></label>
                    <InputText id="pseudo" @bind-Value="User.Pseudo" class="form-control" placeholder="Entrez le pseudo" />
                    <ValidationMessage For="() => User.Pseudo" class="text-danger" />
                    <div class="form-text">Le pseudo sera utilisé pour l'identification de l'utilisateur sur la plateforme.</div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-4">
                        <label for="city" class="form-label fw-bold">Ville</label>
                        <InputText id="city" @bind-Value="User.City" class="form-control" placeholder="Entrez la ville" />
                        <ValidationMessage For="() => User.City" class="text-danger" />
                    </div>

                    <div class="col-md-6 mb-4">
                        <label for="address" class="form-label fw-bold">Adresse</label>
                        <InputText id="address" @bind-Value="User.Address" class="form-control" placeholder="Entrez l'adresse" />
                        <ValidationMessage For="() => User.Address" class="text-danger" />
                    </div>
                </div>

                <div class="mb-4">
                    <div class="form-check form-switch">
                        <InputCheckbox id="isaccountactivated" @bind-Value="User.IsAccountActivated" class="form-check-input" />
                        <label class="form-check-label fw-bold" for="isaccountactivated">Compte activé</label>
                    </div>
                    <div class="form-text">Activez ou désactivez le compte de l'utilisateur.</div>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <a href="/users" class="btn btn-outline-secondary me-2">Annuler</a>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle me-1"></i> Enregistrer les modifications
                    </button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }

    // Propriétés pour gérer les rôles (commentées pour le moment)
    private List<IdentityRole<int>> AvailableRoles = new();
    private string SelectedRole = string.Empty;
    private string OriginalRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User ??= await context.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

    }

    private async Task UpdateUser()
    {
        // 1. Mettre à jour les informations de base de l'utilisateur
        using var context = DbFactory.CreateDbContext();

        var userInDb = await context.Users.FindAsync(User!.Id);

        if (userInDb == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        userInDb.Name = User.Name;
        userInDb.LastName = User.LastName;
        userInDb.Pseudo = User.Pseudo;
        userInDb.City = User.City;
        userInDb.Address = User.Address;
        userInDb.IsAccountActivated = User.IsAccountActivated;

        try
        {
            await context.SaveChangesAsync();

        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    private bool UserExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Users.Any(e => e.Id == id);
    }
}