@page "/users"
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using CESIZen.Data.Entities
@using CESIZen.Data.Context
@using Microsoft.AspNetCore.Identity
@implements IAsyncDisposable
@inject IDbContextFactory<CESIZen.Data.Context.CESIZenDbContext> DbFactory
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole<int>> RoleManager
@inject NavigationManager NavigationManager

<PageTitle>Utilisateurs</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Utilisateurs</h1>
    <div>
        <a href="users/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Créer un nouvel utilisateur
        </a>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else
{
    @* LISTE DES UTILISATEURS *@
    <div class="card shadow-sm">
        <div class="list-group list-group-flush">
            @foreach (var userWithRole in usersWithRoles)
            {
                <div class="list-group-item list-group-item-action p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-1">@userWithRole.User.Name @userWithRole.User.LastName</h5>
                            <p class="small text-muted mb-0">
                                <i class="bi bi-envelope"></i> @userWithRole.User.Email
                                <span class="ms-3"><i class="bi bi-person-badge"></i> @userWithRole.Role</span>
                                @if (!string.IsNullOrEmpty(userWithRole.User.City))
                                {
                                    <span class="ms-3"><i class="bi bi-geo-alt"></i> @userWithRole.User.City</span>
                                }
                                <span class="ms-3">
                                    @if (userWithRole.User.IsAccountActivated)
                                    {
                                        <span class="badge rounded-pill bg-success">Activé</span>
                                    }
                                    else
                                    {
                                        <span class="badge rounded-pill bg-danger">Désactivé</span>
                                    }
                                </span>
                            </p>
                        </div>
                        <div>
                            <div class="btn-group btn-group-sm">
                                <a href="@($"users/details?id={userWithRole.User.Id}")" class="btn btn-outline-info">
                                    <i class="bi bi-info-circle"></i> Détails
                                </a>
                                <a href="@($"users/edit?id={userWithRole.User.Id}")" class="btn btn-outline-secondary">
                                    <i class="bi bi-pencil"></i> Modifier
                                </a>
                                <button class="btn btn-outline-danger" @onclick="() => ConfirmDelete(userWithRole.User)">
                                    <i class="bi bi-trash"></i> Supprimer
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        Confirmer la suppression
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer l'utilisateur <strong>@userToDelete?.Name @userToDelete?.LastName</strong> ?</p>
                    <p class="text-danger">
                        <i class="bi bi-exclamation-triangle"></i> Cette action est irréversible et supprimera définitivement cet utilisateur du système.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUser">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private CESIZenDbContext context = default!;
    private bool isLoading = true;
    private List<UserWithRole> usersWithRoles = new List<UserWithRole>();
    private IQueryable<UserWithRole> usersWithRolesQueryable => usersWithRoles.AsQueryable();
    private bool showDeleteModal = false;
    private User userToDelete;

    // Classe pour stocker les informations utilisateur avec son rôle
    private class UserWithRole
    {
        public User User { get; set; } = default!;
        public string Role { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();
            // Charger les utilisateurs
            var users = await context.Users.ToListAsync();
            // Récupérer le rôle de chaque utilisateur
            foreach (var user in users)
            {
                var roles = await UserManager.GetRolesAsync(user);
                var role = roles.FirstOrDefault() ?? "Utilisateur";
                usersWithRoles.Add(new UserWithRole
                {
                    User = user,
                    Role = role
                });
            }
        }
        catch (Exception)
        {
            // Gérer les erreurs
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ConfirmDelete(User user)
    {
        userToDelete = user;
        showDeleteModal = true;
    }

    private async Task DeleteUser()
    {
        if (userToDelete != null)
        {
            await UserManager.DeleteAsync(userToDelete);
            // Recharger la liste
            usersWithRoles.Clear();
            await OnInitializedAsync();
        }

        showDeleteModal = false;
        userToDelete = null;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        userToDelete = null;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}